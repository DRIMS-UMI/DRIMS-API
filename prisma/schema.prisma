// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url = env("DATABASE_URL")
}

model user {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  title     String?
  email     String   @unique
  password  String
  phone     String?
  designation String?
  role      Role     // Defines user roles
  activities userActivity[]
  student     student? 
  facultyMember facultyMember?
  supervisor   supervisor?
   updatedStatuses studentStatus[]  // Add this line

  submittedProposals proposal[]        @relation("submittedProposals")
   submittedGrades    proposalGrade[] 
  
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

enum Role {
  SUPERADMIN        // Manages all users, IT administration, system management
  RESEARCH_ADMIN    // Same as SuperAdmin but without form editing access
  SCHOOL_ADMIN      // Manages students from the proposal submission stage onwards
  DEAN             // School Dean with school admin privileges
  SCHOOL_PA        // Personal Assistant with school admin privileges
  STUDENT          // Views details, accepts dates, and sees notifications
  FACULTY          // Faculty member role
  SUPERVISOR       // Supervisor role
  MANAGER           // Manager role for overseeing operations

  EXAMINER          // Examiner role for evaluating student work
  COORDINATOR       // Program/Department coordinator role
  LIBRARIAN        // Library staff role for managing thesis submissions
  FINANCE_ADMIN    // Finance administrator role
  REGISTRY_ADMIN   // Registry administrator role
  GRADUATE_SCHOOL  // Graduate school administrator role
}

model userActivity {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        user?     @relation(fields: [userId], references: [id])
  userId      String?   @db.ObjectId
  action      String   // e.g., "Updated Proposal Status", "Assigned Supervisor"
  entityType  String   // e.g., "Proposal", "Student", "Viva"
  entityId    String   // ID of the affected entity
  details     String?  // Additional details about the activity (e.g. tracked changes)
  timestamp   DateTime @default(now())
}

model student {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  title                 String?
  firstName             String
  lastName              String
  course                String?
  email                 String         @unique
  phoneNumber          String?
  dateOfBirth          DateTime?
  gender               String?        // "male" or "female"
  
  campus               campus?        @relation(fields: [campusId], references: [id])
  campusId             String?        @db.ObjectId
  school               school?        @relation(fields: [schoolId], references: [id])
  schoolId             String?        @db.ObjectId
  department           department?    @relation(fields: [departmentId], references: [id])
  departmentId         String?        @db.ObjectId
  
  academicYear         String?
  studyMode            String?        // "Full Time" or "Part Time"
  intakePeriod         String?
  programLevel         String?        // "Masters" or "PhD"
  specialization       String?
  completionTime       Int?           // Expected completion time in months
  
  admissionDate        DateTime       @default(now())
  expectedCompletionDate DateTime?
  totalDuration        Int?           // Total duration in days since admission
  currentStatus        String?        // Current status of the student
  isActive            Boolean        @default(true)
 
  fieldWork            fieldWork[]     
  
  user                 user?          @relation(fields: [userId], references: [id])
  userId               String?        @unique @db.ObjectId

  // Arrays
  statuses             studentStatus[] 
  proposals            proposal[]     
  notifications        notification[]   
  supervisorIds        String[]       @db.ObjectId
  supervisors          supervisor[]     @relation(fields: [supervisorIds], references:[id])
  
  books                book[]         
  vivas                viva[]       

  // Timestamps
  createdAt           DateTime?       @default(now())
  updatedAt           DateTime?       @updatedAt
}

model statusDefinition {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String   @unique  // e.g., "BREAK", "WORKSHOP", etc.
  description     String
  expectedDuration Int?     // Expected duration in days
  warningDays     Int?     // Days before expected end to send warning
  criticalDays    Int?     // Days after expected end to send critical notification
  delayDays       Int?     // Days after critical to send delay notification
  notifyRoles     Role[]   // Which roles to notify
  color           String?   // Color for UI display
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  studentStatuses studentStatus[] // All student statuses using this definition
  proposalStatuses proposalStatus[] // All proposal statuses using this definition
}

model studentStatus {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  student           student?         @relation(fields: [studentId], references: [id])
  studentId         String?          @db.ObjectId
  definition        statusDefinition? @relation(fields: [definitionId], references: [id])
  definitionId      String?          @db.ObjectId
  startDate         DateTime         @default(now())
  endDate           DateTime?
  duration          Int?             // Actual duration in days
  conditions        String?          // Conditions or remarks
  isActive          Boolean          @default(true)
  
  notificationsSent notificationLog[] // Track which notifications were sent
  isCurrent         Boolean          @default(true)
  createdAt         DateTime?        @default(now())
  updatedAt         DateTime?        @updatedAt
  updatedBy         user?            @relation(fields: [updatedById], references: [id])
  updatedById       String?          @db.ObjectId
}

model notificationLog {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  studentStatus studentStatus   @relation(fields: [statusId], references: [id])
  statusId      String          @db.ObjectId
  type          NotificationType
  sentAt        DateTime        @default(now())
  recipients    String[]        // List of email addresses notified
  message       String
}

enum NotificationType {
  WARNING    // Approaching deadline
  CRITICAL   // Past deadline
  INFO       // General information
}

model proposal {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  researchArea String?
  fileData    Bytes
  fileName    String
  fileType    String
  isCurrent   Boolean          @default(false)
  student     student?          @relation(fields: [studentId], references: [id])
  studentId   String?           @db.ObjectId
  submittedBy user?            @relation(name: "submittedProposals", fields: [submittedById], references: [id])
  submittedById String?        @db.ObjectId
  reviewerIds String[]          @db.ObjectId
  reviewers   reviewer[]       @relation(fields: [reviewerIds], references: [id])
  submittedAt DateTime         @default(now())
  defenseDate DateTime?
  panelists   panelist[]       @relation(fields: [panelistIds], references: [id])
  panelistIds String[]         @db.ObjectId

  comments    String?
  markRange   Int?
  grades      proposalGrade[]
  statuses    proposalStatus[] // Track proposal status history
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  submissionDate DateTime      @default(now())

}

model proposalStatus {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  proposal          proposal         @relation(fields: [proposalId], references: [id])
  proposalId        String           @db.ObjectId
  definition        statusDefinition @relation(fields: [definitionId], references: [id])
  definitionId      String           @db.ObjectId
  startDate         DateTime         @default(now())
  endDate           DateTime?
  duration          Int?             // Actual duration in days
  conditions        String?          // Conditions or remarks
  isActive          Boolean          @default(true)
  isCurrent         Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model proposalGrade {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  proposal    proposal  @relation(fields: [proposalId], references: [id])
  proposalId  String    @db.ObjectId
  grade       Float
  feedback    String?
  submittedBy    user      @relation(fields: [submittedById], references: [id])
  submittedById  String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}



model book {
  id                           String    @id @default(auto()) @map("_id") @db.ObjectId
  student                      student?   @relation(fields: [studentId], references: [id])
  studentId                    String?    @db.ObjectId
  submittedAt                  DateTime  @default(now())
  externalSubmissionDate       DateTime?
  internalSubmissionDate       DateTime?
  externalReportSubmissionDate DateTime?
  internalReportSubmissionDate DateTime?
  isCurrent                    Boolean   @default(false)
  submissionCondition         String    // Normal or Resubmission
  researchAdminUpdated        Boolean   @default(false)
  examiner            examiner[] @relation(fields: [examinerIds], references: [id])
  examinerIds          String[]   @db.ObjectId
  externalMarks               Int?
  internalMarks               Int?
  finalGrade                  Float?    // Average of external and internal marks
  status                      String    // Under Examination, Passed, Failed, Resubmission Required
}

model examiner {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String    @unique
  type        String    // Internal or External
  submittedAt DateTime?
  bookIds     String[]  @db.ObjectId
  books       book[]    @relation(fields: [bookIds], references: [id])
}

model supervisor {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  title    String?
  employeeId String?
  designation String?
  role        Role
  workEmail     String    @unique
  personalEmail String?
  primaryPhone  String
  secondaryPhone String?
  facultyType   String    // dean, school_admin, faculty
  studentIds String[]  @db.ObjectId
  students student[] @relation(fields: [studentIds], references:[id])
  user     user?    @relation(fields: [userId], references: [id])
  userId   String?  @unique @db.ObjectId
  school   school?  @relation(fields: [schoolId], references: [id])
  schoolId String?  @db.ObjectId
  campus   campus?  @relation(fields: [campusId], references: [id])
  campusId String?  @db.ObjectId
  department department? @relation(fields: [departmentId], references: [id])
  departmentId String? @db.ObjectId
}

model fieldWork {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  student        student?  @relation(fields: [studentId], references: [id])
  studentId      String?   @db.ObjectId
  status         String   // Ongoing, Completed
  startDate      DateTime
  endDate        DateTime?
  letterReceived Boolean  @default(false)
}

model reviewer {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String             @unique
  proposalIds String[]         @db.ObjectId
  proposals proposal[]          @relation(fields: [proposalIds], references: [id])
  campus    campus?            @relation(fields: [campusId], references: [id])
  campusId  String?            @db.ObjectId
}

model panelist {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String    @unique
  proposalIds String[]  @db.ObjectId
  proposals   proposal[] @relation(fields: [proposalIds], references: [id])
  campus      campus?   @relation(fields: [campusId], references: [id])
  campusId    String?   @db.ObjectId
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt
}

model viva {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  student      student?  @relation(fields: [studentId], references: [id])
  studentId    String?  @db.ObjectId
  scheduledAt  DateTime
  status       String  // Pending, Passed, Failed
  panelists    String[]
  verdict      String?
  minutesPending Boolean @default(true)
}

model notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  recipient String   // Student or Admin Email
  message   String
  createdAt DateTime @default(now())
  sent      Boolean @default(false)
  student     student?  @relation(fields: [studentId], references: [id])
  studentId   String?   @db.ObjectId
}

model school {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  code        String   
  url         String?
  campus      campus   @relation(fields: [campusId], references: [id])
  campusId    String   @db.ObjectId
  members     schoolMember[] 
  departments department[]    
  facultyMembers facultyMember[]
  supervisors supervisor[]
  students    student[]
}

model campus {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  location    String
  schools     school[] 
  facultyMembers facultyMember[]
  supervisors supervisor[]
  students    student[]
  reviewers   reviewer[]
  panelists   panelist[]
}

model schoolMember {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  school    school?   @relation(fields: [schoolId], references: [id])
  schoolId  String?    @db.ObjectId
  name      String
  contact   String
  email     String @unique
  role      String // Dean, Personal Assistant, School Admin
  isCurrent Boolean @default(true)
}

model department {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  school    school?   @relation(fields: [schoolId], references: [id])
  schoolId  String?    @db.ObjectId
  name      String
  url       String?
  adminName String
  adminContact   String
  adminEmail     String @unique
  supervisors supervisor[]
  students    student[]
}

model facultyMember {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId  String?
  school      school?   @relation(fields: [schoolId], references: [id])
  schoolId    String?    @db.ObjectId
  campus      campus?   @relation(fields: [campusId], references: [id])
  campusId    String?   @db.ObjectId
  name        String
  workEmail   String   @unique
  personalEmail String?
  primaryPhone String
  secondaryPhone String?
  designation String?
  facultyType String    // dean, school_admin, faculty
  role        Role
  isAdmin     Boolean  @default(false)  // Indicates if faculty member is school admin
  user        user?    @relation(fields: [userId], references: [id])
  userId      String?  @unique @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
