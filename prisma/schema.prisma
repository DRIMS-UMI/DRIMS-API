// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url = env("DATABASE_URL")
}

// Define enums at the top of the schema
enum NotificationType {
  EMAIL
  SYSTEM
  REMINDER
}

enum NotificationStatusType {  // Renamed to avoid conflicts
  PENDING
  SENT
  FAILED
  CANCELLED
}

enum NotificationRecipientType {  // Renamed to avoid conflicts
  USER
  STUDENT
  EXAMINER
  SUPERVISOR
  PANELIST
  EXTERNAL
}

model user {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  title     String?
  email     String   @unique
  password  String
  phone     String?
  designation String?
  role      Role     // Defines user roles
  isActive  Boolean? @default(true)
  deactivatedAt DateTime?
  deactivatedBy user? @relation("deactivatedUsers", fields: [deactivatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  deactivatedById String? @db.ObjectId
  deactivatedUsers user[] @relation("deactivatedUsers")
  resetToken  String?
  resetTokenExpiry DateTime?

  reactivatedAt DateTime?
   reactivatedBy user? @relation("reactivatedUsers", fields: [reactivatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reactivatedById String? @db.ObjectId
  reactivatedUsers user[] @relation("reactivatedUsers")
  
  activities userActivity[]
  student     student? 
  facultyMember facultyMember?
  supervisor   supervisor?
  updatedStatuses studentStatus[]  // Add this line

  submittedProposals proposal[]        @relation("submittedProposals")
  submittedProposalReviewGrades    proposalReviewGrade[] 
  submittedProposalDefenseGrades    proposalDefenseGrade[] 
  
  submittedBooks book[]        @relation("submittedBooks")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  uploadedDocuments letterDocument[]

  // Add these relation fields
  updatedDefenseGrades proposalDefenseGrade[] @relation("updatedDefenseGrades")
  updatedReviewGrades  proposalReviewGrade[]  @relation("updatedReviewGrades")
  
  // Add campus relation
  campus    campus?   @relation(fields: [campusId], references: [id])
  campusId  String?   @db.ObjectId

  // Add this relation
  notifications notification[] @relation("UserNotifications")
}

enum Role {
  SUPERADMIN        // Manages all users, IT administration, system management
  RESEARCH_ADMIN    // Same as SuperAdmin but without form editing access
  SCHOOL_ADMIN      // Manages students from the proposal submission stage onwards
  DEAN             // School Dean with school admin privileges
  SCHOOL_PA        // Personal Assistant with school admin privileges
  STUDENT          // Views details, accepts dates, and sees notifications
  FACULTY          // Faculty member role
  SUPERVISOR       // Supervisor role
  MANAGER           // Manager role for overseeing operations

  EXAMINER          // Examiner role for evaluating student work
  COORDINATOR       // Program/Department coordinator role
  LIBRARIAN        // Library staff role for managing thesis submissions
  FINANCE_ADMIN    // Finance administrator role
  REGISTRY_ADMIN   // Registry administrator role
  GRADUATE_SCHOOL  // Graduate school administrator role
}

model userActivity {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        user?     @relation(fields: [userId], references: [id])
  userId      String?   @db.ObjectId
  action      String   // e.g., "Updated Proposal Status", "Assigned Supervisor"
  entityType  String   // e.g., "Proposal", "Student", "Viva"
  entityId    String   // ID of the affected entity
  details     String?  // Additional details about the activity (e.g. tracked changes)
  timestamp   DateTime @default(now())
}

model student {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  title                 String?
  registrationNumber     String?        
  firstName             String
  lastName              String
  course                String?
  email                 String         @unique
  phoneNumber          String?
  dateOfBirth          DateTime?
  gender               String?        // "male" or "female"
  graduatedAt    DateTime?
  graduation     graduation?
  
  campus               campus?        @relation(fields: [campusId], references: [id])
  campusId             String?        @db.ObjectId
  school               school?        @relation(fields: [schoolId], references: [id])
  schoolId             String?        @db.ObjectId
  department           department?    @relation(fields: [departmentId], references: [id])
  departmentId         String?        @db.ObjectId
  
  gradAcademicYear     String?
  academicYear         String?
  studyMode            String?        // "Full Time" or "Part Time"
  intakePeriod         String?
  programLevel         String?        // "Masters" or "PhD"
  specialization       String?
  completionTime       Int?           // Expected completion time in months
  
  admissionDate        DateTime       @default(now())
  expectedCompletionDate DateTime?
  totalDuration        Int?           // Total duration in days since admission
  currentStatus        String?        // Current status of the student
  isActive            Boolean        @default(true)
 
  fieldWork            fieldWork[]     
  
  user                 user?          @relation(fields: [userId], references: [id])
  userId               String?        @unique @db.ObjectId

  // Arrays
  statuses             studentStatus[] 
  proposals            proposal[]     
  notifications        notification[]    @relation("StudentNotifications")
  supervisorIds        String[]       @db.ObjectId
  supervisors          supervisor[]     @relation(fields: [supervisorIds], references:[id])
  
  books                book[]         
  resultsApprovedDate  DateTime?
  resultsSentDate      DateTime?
  senateApprovalDate   DateTime?

  // Timestamps
  createdAt           DateTime?       @default(now())
  updatedAt           DateTime?       @updatedAt
}

model statusDefinition {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String   @unique  // e.g., "BREAK", "WORKSHOP", etc.
  description     String
  expectedDuration Int?     // Expected duration in days
  warningDays     Int?     // Days before expected end to send warning
  criticalDays    Int?     // Days after expected end to send critical notification
  delayDays       Int?     // Days after critical to send delay notification
  notifyRoles     Role[]   // Which roles to notify
  color           String?   // Color for UI display
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  studentStatuses studentStatus[] // All student statuses using this definition
  proposalStatuses proposalStatus[] // All proposal statuses using this definition
  bookStatuses  bookStatus[]
}

model studentStatus {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  student           student?         @relation(fields: [studentId], references: [id])
  studentId         String?          @db.ObjectId
  definition        statusDefinition? @relation(fields: [definitionId], references: [id])
  definitionId      String?          @db.ObjectId
  startDate         DateTime         @default(now())
  endDate           DateTime?
  duration          Int?             // Actual duration in days
  conditions        String?          // Conditions or remarks
  isActive          Boolean          @default(true)
  
  notificationsSent notificationLog[] // Track which notifications were sent
  isCurrent         Boolean          @default(true)
  createdAt         DateTime?        @default(now())
  updatedAt         DateTime?        @updatedAt
  updatedBy         user?            @relation(fields: [updatedById], references: [id])
  updatedById       String?          @db.ObjectId
  
  // Add this relation
  notifications     notification[]   @relation("StatusNotifications")
}

model notificationLog {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  studentStatus studentStatus   @relation(fields: [statusId], references: [id])
  statusId      String          @db.ObjectId
  type          NotificationType
  sentAt        DateTime        @default(now())
  recipients    String[]        // List of email addresses notified
  message       String
}

model proposal {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  proposalCode   String      @unique
  title       String
  description String?
  researchArea String?
  //fileData Bytes?
  //fileName    String?
  //fileType    String?
  isCurrent   Boolean          @default(false)
  student     student?          @relation(fields: [studentId], references: [id])
  studentId   String?           @db.ObjectId
  submittedBy user?            @relation(name: "submittedProposals", fields: [submittedById], references: [id])
  submittedById String?        @db.ObjectId
  reviewerIds String[]          @db.ObjectId
  reviewers   reviewer[]       @relation(fields: [reviewerIds], references: [id])
  submittedAt DateTime         @default(now())
  defenseDate DateTime?
  complianceReportDate DateTime?
  panelists   panelist[]       @relation(fields: [panelistIds], references: [id])
  panelistIds String[]         @db.ObjectId

  comments    String?
  markRange   Int?

averageReviewMark Float?       
averageDefenseMark Float?
  reviewGrades      proposalReviewGrade[]
  defenseGrades proposalDefenseGrade[]

 fieldLetters letterDocument[]
 fieldLetterDate DateTime?

  statuses    proposalStatus[] // Track proposal status history
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  submissionDate DateTime      @default(now())
  defenses    proposalDefense[] // One-to-many relation with proposalDefense
}

model letterDocument {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  type        String
  file        Bytes
  proposalId  String   @db.ObjectId
  uploadedById String  @db.ObjectId
  proposal    proposal @relation(fields: [proposalId], references: [id])
  uploadedBy  user     @relation(fields: [uploadedById], references: [id])
  
}

model proposalDefenseGrade {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  proposal    proposal  @relation(fields: [proposalId], references: [id])
  proposalId  String    @db.ObjectId
  grade       Float
  feedback    String?
  gradedBy    panelist  @relation(fields: [gradedById], references: [id])
  gradedById  String    @db.ObjectId
  submittedBy    user      @relation(fields: [submittedById], references: [id])
  submittedById  String    @db.ObjectId
  updatedBy      user?     @relation("updatedDefenseGrades", fields: [updatedById], references: [id])
  updatedById    String?   @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model proposalStatus {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  proposal          proposal         @relation(fields: [proposalId], references: [id])
  proposalId        String           @db.ObjectId
  definition        statusDefinition @relation(fields: [definitionId], references: [id])
  definitionId      String           @db.ObjectId
  startDate         DateTime         @default(now())
  endDate           DateTime?
  duration          Int?             // Actual duration in days
  conditions        String?          // Conditions or remarks
  isActive          Boolean          @default(true)
  isCurrent         Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

enum reviewerVerdict {
  PASS
  PASS_WITH_MINOR_CORRECTIONS
  PASS_WITH_MAJOR_CORRECTIONS
  FAIL
 
}

model proposalReviewGrade {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  proposal    proposal  @relation(fields: [proposalId], references: [id])
  proposalId  String    @db.ObjectId
  verdict      reviewerVerdict?
  feedback    String?
  gradedBy    reviewer  @relation(fields: [gradedById], references: [id])
  gradedById  String    @db.ObjectId
  submittedBy    user      @relation(fields: [submittedById], references: [id])
  submittedById  String    @db.ObjectId
  updatedBy      user?     @relation("updatedReviewGrades", fields: [updatedById], references: [id])
  updatedById    String?   @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model book {
  id                           String      @id @default(auto()) @map("_id") @db.ObjectId
  bookCode                     String      @unique
  title                       String
  description                 String?
  student                      student?    @relation(fields: [studentId], references: [id])
  studentId                    String?     @db.ObjectId
  submittedAt                  DateTime    @default(now())
  submissionDate              DateTime
  externalSubmissionDate       DateTime?
  internalSubmissionDate       DateTime?
  externalReportSubmissionDate DateTime?
  internalReportSubmissionDate DateTime?
  isCurrent                    Boolean     @default(false)
  submissionCondition         String      // Normal or Resubmission
  researchAdminUpdated        Boolean     @default(false)
  examiners                    examiner[]  @relation(fields: [examinerIds], references: [id])
  examinerIds                 String[]    @db.ObjectId
 
  externalMarks              Int?
  internalMarks              Int?
  finalGrade                 Float?       // Average of external and internal marks
  statuses                   bookStatus[]
  averageExamMark           Float?
  averageVivaMark           Float?
  defenseDate               DateTime?
  submittedBy               user?        @relation(name: "submittedBooks", fields: [submittedById], references: [id])
  submittedById             String?      @db.ObjectId
  createdAt                 DateTime     @default(now())
  updatedAt                 DateTime     @updatedAt
  examinerAssignments       examinerBookAssignment[]
   vivaHistory               viva[]        // One-to-many relation with Viva
   minutesSentDate        DateTime?
   complianceReportDate   DateTime?
}

model bookStatus {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  book           book             @relation(fields: [bookId], references: [id])
  bookId         String           @db.ObjectId
  definition     statusDefinition @relation(fields: [definitionId], references: [id])
  definitionId   String           @db.ObjectId
  startDate      DateTime         @default(now())
  endDate        DateTime?
  duration       Int?             // Actual duration in days
  conditions     String?          // Conditions or remarks
  isActive       Boolean          @default(true)
  isCurrent      Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model examiner {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  primaryEmail    String    @unique
  secondaryEmail  String?
  primaryPhone    String?
  secondaryPhone  String?
  type            String    // Internal or External
  bookIds         String[]  @db.ObjectId
  books           book[]    @relation(fields: [bookIds], references: [id])
  title           String?
  designation     String?
  institution     String?
  address         String?
  specialization  String?
 
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  campus          campus?   @relation(fields: [campusId], references: [id])
  campusId        String?   @db.ObjectId
  school          school?   @relation(fields: [schoolId], references: [id])
  schoolId        String?   @db.ObjectId
  department      department? @relation(fields: [departmentId], references: [id])
  departmentId    String?   @db.ObjectId
  bookAssignments examinerBookAssignment[]

  // Add this relation
  notifications notification[] @relation("ExaminerNotifications")
}

model examinerBookAssignment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  examiner    examiner  @relation(fields: [examinerId], references: [id])
  examinerId  String    @db.ObjectId
  book        book      @relation(fields: [bookId], references: [id])
  bookId      String    @db.ObjectId
  assignedAt  DateTime  @default(now())
  status      String    // Pending, Accepted, Rejected, Completed
  submissionType String? // Type of submission (e.g., Initial, Revised)
  isCurrent   Boolean   @default(true)
  grade       Float?
  feedback    String?
  reportSubmittedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model supervisor {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  title          String?
  employeeId     String?
  designation    String?
  role           Role
  workEmail      String      @unique
  personalEmail  String?
  primaryPhone   String
  secondaryPhone String?
  facultyType    String      // dean, school_admin, faculty
  studentIds     String[]    @db.ObjectId
  students       student[]   @relation(fields: [studentIds], references: [id])
  user           user?       @relation(fields: [userId], references: [id])
  userId         String?     @unique @db.ObjectId
  school         school?     @relation(fields: [schoolId], references: [id])
  schoolId       String?     @db.ObjectId
  campus         campus?     @relation(fields: [campusId], references: [id])
  campusId       String?     @db.ObjectId
  department     department? @relation(fields: [departmentId], references: [id])
  departmentId   String?     @db.ObjectId
}

model fieldWork {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  student        student?  @relation(fields: [studentId], references: [id])
  studentId      String?   @db.ObjectId
  status         String   // Ongoing, Completed
  startDate      DateTime
  endDate        DateTime?
  letterReceived Boolean  @default(false)
}



model reviewer {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String             @unique
  institution String?
  specialization String?
  primaryPhone String?
  secondaryPhone String?
  proposalIds String[]         @db.ObjectId
  proposals proposal[]          @relation(fields: [proposalIds], references: [id])
  campus    campus?            @relation(fields: [campusId], references: [id])
  campusId  String?            @db.ObjectId
  grades    proposalReviewGrade[]
}

model panelist {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String    @unique
  proposalIds String[]  @db.ObjectId
  proposals   proposal[] @relation(fields: [proposalIds], references: [id])
  
  campus      campus?   @relation(fields: [campusId], references: [id])
  campusId    String?   @db.ObjectId
  vivaIds       String[] @db.ObjectId
  vivas       viva[]  @relation(fields: [vivaIds], references: [id])
  grades      proposalDefenseGrade[]
  institution String?
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt
  proposalDefenseIds String[] @db.ObjectId
  proposalDefenses proposalDefense[] @relation(fields: [proposalDefenseIds], references: [id])
}

enum VivaVerdict {
  PASS
  PASS_WITH_MINOR_CORRECTIONS
  PASS_WITH_MAJOR_CORRECTIONS
  FAIL
  RESCHEDULE
}

model viva {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
   book          book        @relation(fields: [bookId], references: [id])
  bookId        String      @db.ObjectId
  scheduledDate DateTime
  status        String      
    verdict       VivaVerdict?
  comments      String?
   attempt       Int         // To track which attempt this is
   panelistIds String[]  @db.ObjectId
  panelists   panelist[] @relation(fields: [panelistIds], references: [id])
  completedAt  DateTime?
  isCurrent    Boolean @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum ProposalDefenseVerdict {
  PASS
  PASS_WITH_MINOR_CORRECTIONS
  PASS_WITH_MAJOR_CORRECTIONS
  FAIL
  RESCHEDULE
}

model proposalDefense {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  proposal     proposal @relation(fields: [proposalId], references: [id])
  proposalId   String   @db.ObjectId
  scheduledDate DateTime
  status       String
  verdict      ProposalDefenseVerdict?
  comments     String?
  attempt      Int      // To track which attempt this is
  panelistIds  String[] @db.ObjectId
  panelists    panelist[] @relation(fields: [panelistIds], references: [id])
  completedAt  DateTime?
  isCurrent    Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model notification {
  id               String                  @id @default(auto()) @map("_id") @db.ObjectId
  type             NotificationType
  statusType       NotificationStatusType  @default(PENDING)
  title            String
  message          String
  recipientCategory NotificationRecipientType
  recipientEmail   String
  recipientName    String
  scheduledFor     DateTime
  sentAt           DateTime?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  metadata         Json?
  retryCount       Int                    @default(0)
  error            String?

  user             user?                  @relation("UserNotifications", fields: [userId], references: [id])
  userId           String?                @db.ObjectId

  student          student?               @relation("StudentNotifications", fields: [studentId], references: [id])
  studentId        String?                @db.ObjectId

  examiner         examiner?              @relation("ExaminerNotifications", fields: [examinerId], references: [id])
  examinerId       String?                @db.ObjectId

  studentStatus    studentStatus?         @relation("StatusNotifications", fields: [studentStatusId], references: [id])
  studentStatusId  String?                @db.ObjectId

  @@index([statusType, scheduledFor])
  @@index([recipientCategory])
  @@index([userId])
  @@index([studentId])
  @@index([examinerId])
  @@index([studentStatusId])
}

model school {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  code        String   
  url         String?
  campus      campus   @relation(fields: [campusId], references: [id])
  campusId    String   @db.ObjectId
  members     schoolMember[] 
  departments department[]    
  facultyMembers facultyMember[]
  supervisors supervisor[]
  students    student[]
  examiners   examiner[]
}

model campus {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  location    String
  schools     school[] 
  facultyMembers facultyMember[]
  supervisors supervisor[]
  students    student[]
  reviewers   reviewer[]
  panelists   panelist[]
  examiners   examiner[]
  users       user[]   // Add this relation field
}

model schoolMember {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  school    school?   @relation(fields: [schoolId], references: [id])
  schoolId  String?    @db.ObjectId
  name      String
  contact   String
  email     String @unique
  role      String // Dean, Personal Assistant, School Admin
  isCurrent Boolean @default(true)
}

model department {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  school    school?   @relation(fields: [schoolId], references: [id])
  schoolId  String?    @db.ObjectId
  name      String
  url       String?
  adminName String
  adminContact   String
  adminEmail     String @unique
  supervisors supervisor[]
  students    student[]
  examiners   examiner[]
}

model facultyMember {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId  String?
  school      school?   @relation(fields: [schoolId], references: [id])
  schoolId    String?    @db.ObjectId
  campus      campus?   @relation(fields: [campusId], references: [id])
  campusId    String?   @db.ObjectId
  name        String
  workEmail   String   @unique
  personalEmail String?
  primaryPhone String
  secondaryPhone String?
  designation String?
  facultyType String    // dean, school_admin, faculty
  role        Role
  isAdmin     Boolean  @default(false)  // Indicates if faculty member is school admin
  user        user?    @relation(fields: [userId], references: [id])
  userId      String?  @unique @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model graduation {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  student        student  @relation(fields: [studentId], references: [id])
  studentId      String   @db.ObjectId @unique
  academicYear   String   // Changed from Int to String to store "2023/2024" format
  programLevel        String
  graduationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([academicYear])
 
}
